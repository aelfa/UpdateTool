/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'eclipse'
}

version = '1.0.4'
sourceCompatibility = '11'

new File(projectDir, "src/main/resources/VERSION").text = version;

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    compile.transitive = true
    
    linux {
        description = 'linux classpath'
        extendsFrom compile
    }
    
    mac {
        description = 'mac classpath'
        extendsFrom compile
    }
    
    win {
        description ='win classpath'
        extendsFrom compile
    }
}

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}


dependencies {
    compile group: 'org.tinylog', name: 'tinylog-impl', version: '2.0.1'
    compile group: 'net.harawata', name: 'appdirs', version: '1.0.3'
    
    implementation "org.openjfx:javafx-base:13:${platform}"
    implementation "org.openjfx:javafx-controls:13:${platform}"
    implementation "org.openjfx:javafx-fxml:13:${platform}"
    implementation "org.openjfx:javafx-graphics:13:${platform}"
    
    win "org.openjfx:javafx-base:13:win"
    win "org.openjfx:javafx-controls:13:win"
    win "org.openjfx:javafx-fxml:13:win"
    win "org.openjfx:javafx-graphics:13:win"
    
    linux "org.openjfx:javafx-graphics:13:linux"
    linux "org.openjfx:javafx-base:13:linux"
    linux "org.openjfx:javafx-controls:13:linux"
    linux "org.openjfx:javafx-fxml:13:linux"
    
    mac "org.openjfx:javafx-graphics:13:mac"
    mac "org.openjfx:javafx-base:13:mac"
    mac "org.openjfx:javafx-controls:13:mac"
    mac "org.openjfx:javafx-fxml:13:mac"

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

application {
    // Define the main class for the application.
    mainClassName = 'updatetool.gui.Starter'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

task('linuxJar', type: Jar) {
    appendix = "linux"
    from { configurations.linux.collect { it.isDirectory() ? it : zipTree(it) }}
}

task('macJar', type: Jar) {
    appendix = "mac"
    from { configurations.mac.collect { it.isDirectory() ? it : zipTree(it) }}
}

task('winJar', type: Jar) {
    appendix = "win"
    from { configurations.win.collect { it.isDirectory() ? it : zipTree(it) }}
}

configure([linuxJar, macJar, winJar]) {
    from sourceSets.main.output
    manifest {
        attributes "Main-Class": "updatetool.gui.Starter"
    }
}

jar.dependsOn linuxJar, macJar, winJar